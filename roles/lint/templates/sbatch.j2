#!/bin/bash
#
#all commands that start with SBATCH contain commands that are just used by SLURM for scheduling
#################
#set a job name
#SBATCH --job-name={{ item.class }}
#################
#a file for job output, you can check job progress
#SBATCH --output={{ item.class }}.out
#################
# a file for errors from the job
#SBATCH --error={{ item.class }}.err
#################
#time you think you need; default is one hour
#in minutes in this case, hh:mm:ss
#SBATCH --time={{ item.time }}
#################
#quality of service; think of it as job priority
#SBATCH --qos=normal
#################
#number of nodes you are requesting
#SBATCH --nodes={{ item.nodes }}
#################
#memory per node; default is 4000 MB per CPU
#SBATCH --mem={{ item.mem }}
#you could use --mem-per-cpu; they mean what we are calling cores
#################
#tasks to run per node; a "task" is usually mapped to a MPI processes.
# for local parallelism (OpenMP or threads), use "--ntasks-per-node=1 --cpus-per-task=16" instead
#SBATCH --ntasks-per-node={{ item.tasks_per_node }}
#SBATCH --cpus-per-task={{ item.cpus_per_task }}
#################

module load jre/1.8.0_91

# Start the Spark master / slave.
MASTER=$(hostname)
srun {{ spark_dir }}/start-cluster $MASTER &

# Wait for cluster to spin start.
sleep 10

{% set cores = item.tasks_per_node * item.cpus_per_task * item.nodes %}

spark-submit \
  --driver-class-path {{ lint_dirs.config }} \
  --class {{ item.class }} \
  --total-executor-cores {{ cores }} \
  --driver-memory {{ item.mem }}m \
  --executor-memory {{ item.mem }}m \
  --master spark://$MASTER:7077 \
  {{ lint_jar_path }}
